shipment filler calls box_placement_location_code = get_box_placement_location_code(pose_wrt_box);

looks at part w/rt box, and chooses one of 4 codes, e.g.
return robot_move_as::RobotMoveGoal::PLACE_PART_FAR_RIGHT;

shipment filler puts this into Part message:
place_part.box_placement_location_code = box_placement_location_code;

shipmentFiller place_part_no_release(Part ) 
 does:     robot_move_ok = robotMove.place_part_no_release(destination_part, 5.0);


populates and sends goal to robot_move_action_server, which executes:
            part_of_interest_ = goal->targetPart;
            errorCode = place_part_fnc_no_release(part_of_interest_);

fnc place_part_fnc_no_release() does:
    unsigned short int box_placement_location_code = part.box_placement_location_code;


calls: is_placeable(inventory_msgs::Part part)
which calls:
   cruise_jspace_pose_w_code(bin_code,box_placement_location_code, q_Q1_cruise_pose_)
   hover_jspace_pose_w_code(bin_code,box_placement_location_code, q_Q1_hover_pose_))

   get_pickup_IK(affine_vacuum_pickup_pose_wrt_base_link_,  box_placement_location_code, dropoff_jspace_pose_))

COULD do set_q_nom_from_destination_part(Part) and index on bin and location code:
  put result in member var q_nom_

THEN call get_manip_IK(affine_vacuum_pickup_pose_wrt_base_link_, q_nom_, dropoff_jspace_pose_)

-----
elbow_joint', 'linear_arm_actuator_joint', 'shoulder_lift_joint', \
'shoulder_pan_joint', 'wrist_1_joint', 'wrist_2_joint', 'wrist_3_joint
    q_Q1_righty_hover_ << 1.8, 0, -0.7, 5.8, 3.6, -1.51, 0; //qual_sensor 1 location, 2018
    q_Q1_righty_hover_flip_ << 1.8, 0, -0.7, 5.8, 0.5, 1.51, 0;    
    q_Q1_righty_cruise_<< 2.5, 0, -1.2, 4.5, 3.27, -1.51, 0; //
    q_Q1_righty_discard_ << 2.5, 0, -1.2, 4.9, 3.27, -1.51, 0;
    
    q_Q1_lefty_discard_ << -1.2, 0, -2.4, 4.65, 2.35, -1.57, 0;      
    q_Q1_lefty_hover_flip_ << -1.2, 0, -2.7, 3, 5.5, 1.57, 0;
    q_Q1_lefty_hover_<< -1.2, 0, -2.7, 3, 2.35, -1.57, 0;      
    q_Q1_lefty_cruise_ << -1.2, 0, -2.4, 4.5, 2.35, -1.57, 0;

    //RIGHTY DROPOFF POSES       
    //covers cases for  left-side of box dropoff (from robot's perspective); 
    //the following are safe transitions:
    //Q1_DROPOFF_FAR_LEFT<->Q1_HOVER<->Q1_HOVER_FLIP_WRIST<->Q1_DROPOFF_NEAR_LEFT
    q_Q1_dropoff_far_left_ << 1.4, 0, -0.28, 6.0, 3.6, -1.51, 0;
    //q_box_Q1_hover_flip_wrist_pose_ << 1.8, 0, -0.7, 5.8, 0.5, 1.51, 0;
    q_Q1_dropoff_near_left_ << 1.5, 0, -0.3, 5.8, 0.4, 1.57, 0;       
    
         //----LEFTY  POSES----
     //covers cases for right-side dropoff; the following are safe transitions:
     //Q1_DROPOFF_FAR_RIGHT<->Q1_HOVER_LEFTY_FLIP<->Q1_HOVER_LEFTY<->Q1_DROPOFF_NEAR_RIGHT   
    q_Q1_dropoff_far_right_ << -1.0, 0, -2.99, 2.8, 5.6, 1.57, 0; //-1.0, 0, -2.99, 2.8, 5.6, 1.57, 0
    q_Q1_dropoff_near_right_<< -1.1, 0, -2.95, 2.7, 2.45, -1.57, 0;

FORWARD: has elbow ang >0 (lefty has elbow-ang<0)
 also, for location Q1, righty shoulder lift ang ~= -0.7  > -1.5  (-1.5 is straight up)
 for location Q1, shoulder pan ~= 5.8
 right-far has qw2~= +1.57
 right-near has qw2 ~= -1.57


REVERSE: has elbow ang <0
   for location Q1,  shoulder lift ang ~= -2.7  < -1.5
   for location Q1, shoulder pan ang ~= 3  (nearly 180-deg away from righty)
   left-far has qw2 ~= -1.5
   left-near has qw2 ~= +1.5

q_elbow_gripper_far and q_elbow_gripper_near  apply to both q1_fwd and q1_rvrs
q1_fwd_gripper_far, q1_fwd_gripper_near, q1_rvrs_gripper_far, q1_rvrs_gripper_near

q1_fwd_gripper_far+/-pi = q1_rvrs_gripper_far
q1_fwd_gripper_near+/- pi = q_rvrs_gripper_near

q_elbow_fwd_gripper_far = q_elbow_rvrs_gripper_far
q_elbow_fwd_gripper_near = q_elbow_rvrs_gripper_near

q_lift_fwd_gripper_far -pi/2 = q_lift_rvrs_gripper_far
q_lift_fwd_gripper_near -pi/2 = q_lift_rvrs_gripper_near

qw1_gripper_near = qw1_gripper_far+/-pi
qw2_gripper_near =qw2_gripper_far +/-pi

qw3_gripper_near = qw3_gripper_far +/-pi ??

start w/ soln for FORWARD and gripper FAR
then also compute soln for FORWARD  and gripper NEAR

for gripper FAR, find O_5 at intersection of jnt6 and jnt5

q1 soln for fwd/gripper-far:
compute location of O_4 at intersection of j5 and j4
  from endpoint, walk back along b6_vec by distance d6
  then walk back along b5_vec by distance d5 (need to compute b5)
  this point is independent of q4,q5,q6
for fwd/gripper-far, O_4 projects onto x-y plane w/ triangle from j1, with offset d4
----------------|
                |
                * (O_4)

r = sqrt(O_4.x*O_4.x + O_4.y*O_4.y)
offset = d4
q1_offset = atan2(d4,r)
q1_raw = atan2(O_4.y,O_4.x)
q1 = q1_raw + q1_offset


FOR fwd/gripper-near:
  negate b5_vec and repeat as above

gasket pose:
(-0.976,2.622,1.006)
robot pose (in front of bin3):
(0.300, 0.880, 0.800); will increase y value as approach bin5
O_pickup_gasket_wrt_base_link = (-1.27,0.09, 0.22) seems reasonable

q1a,q1b = 3.122868, 0.279828
previous computation of q1:
q1a,q1b = 2.935320, 3.199007 (why???)


q1 solns: given desired w_x,w_y of wrist, options include:
 r = sqrt(w_x^2 + w_y^2)
 gamma = atan2(d4,r)

 fwd: phi = atan2(w_y,w_x)
 fwd, righty q1 = phi+gamma, and shoulder_lift q:  -pi/2 < q < 0
 rvrs-->lefty: phi - gamma + pi
 elbow up: q_elbow positive?

??? wrist flip matters??  affects q_elbow; d4 is the same; compute atan(d4,r)

 





